#Использовать reflector
#Использовать sql

Перем _соединение;
Перем таблицаТекущихСвойств;


&ПараметрКонфигурации(
	Имя = "temp_buffers",
	Описание = "Задаёт максимальный объём памяти, выделяемой для временных буферов в каждом сеансе",
	СсылкаНаДокументацию = ""
)
Перем МаксмимальныйОбъемПамятиДляВременныхДанныхСессии Экспорт;

&ПараметрКонфигурации(
	Имя = "temp_tablespaces",
	Описание = "Список табличных пространств для хранения временных таблиц и для сортировки. Согласно документации PG выбирает выбирает из этого списка случайный элемент при создании каждого временного объекта; однако при создании последующих объектов внутри транзакции табличные пространства перебираются последовательно",
	СсылкаНаДокументацию = "https://postgrespro.ru/docs/postgrespro/12/runtime-config-client#GUC-TEMP-TABLESPACES"
)
Перем ТабличныеПространстваВременныхТаблиц Экспорт;

&ПараметрКонфигурации(
	Имя = "wal_writer_delay",
	Описание = "Определяет, с какой периодичностью процесс записи WAL будет сбрасывать WAL на диск.",
	СсылкаНаДокументацию = "https://postgrespro.ru/docs/postgrespro/12/runtime-config-wal#GUC-WAL-WRITER-DELAY"
)
Перем ЗадержкаПередСбросомНаДискЖурналаОпережающейЗаписи Экспорт;

&ПараметрКонфигурации(
	Имя = "wal_compression",
	Описание = "Этот параметр позволяет без дополнительных рисков повреждения данных уменьшить объём WAL, ценой дополнительной нагрузки на процессор",
	СсылкаНаДокументацию = "https://postgrespro.ru/docs/postgrespro/12/runtime-config-wal"
)
Перем ВключитьСжатиеЖурналаОпережающейЗаписи Экспорт;

Процедура Инициализация()
	//попробуем прорекламировать рефлектор - может 1С-ники накинутся ;-)
	таблицаТекущихСвойств = Новый РефлекторОбъекта(ЭтотОбъект).ПолучитьТаблицуСвойств();
	
КонецПроцедуры

Процедура УстановитьСоединение(Соединение) Экспорт
	_соединение = Соединение;
КонецПроцедуры

Процедура ПрименитьИзмененияКонфигурации() Экспорт
	
	ТекстЗапроса = "
	|
	|";
	УниверсальныйЧитательСвойств = Новый Рефлектор();
	
	
	Для Каждого Свойство Из УниверсальныйЧитательСвойств.ПолучитьТаблицуСвойств(ЭтотОбъект) Цикл
		Если Свойство.Аннотации <> Неопределено Тогда
			
			//Анотации получаются правильно через РефлекторОбъекта
			
			Попытка
				_свойство = таблицаТекущихСвойств.Найти(Свойство.Имя);
				ИмяАнгл = _свойство.Аннотации.Найти("ПараметрКонфигурации").Параметры.Найти("Имя")["Значение"];
				Если ИмяАнгл <> Неопределено Тогда
					ЗначениеСвойства = УниверсальныйЧитательСвойств.ПолучитьСвойство(ЭтотОбъект, Свойство.Имя); 
					Сообщить("Записываю " + Свойство.Имя + " = "
						+ ЗначениеСвойства
						+ " под именем " + ИмяАнгл);
					ТекстЗапроса = ТекстЗапроса + 
					" 
					| ALTER SYSTEM SET " + ИмяАнгл + " = '" + ЗначениеСвойства + "' ;
					|";
				КонецЕсли;

			Исключение
				Сообщить("Ошибка чтения свойства " + Свойство.Имя + "
				|" + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли
	КонецЦикла;

	Попытка
		ПрименитьТекущиеПараметры = Новый Запрос();
		ПрименитьТекущиеПараметры.УстановитьСоединение(_соединение);
		ПрименитьТекущиеПараметры.Текст = ТекстЗапроса + 
		"
		|SELECT pg_reload_conf();
		|";
		ПрименитьТекущиеПараметры.Выполнить();
	Исключение
		ВызватьИсключение " Ошибка применения параметров конфигурации
		|" + ОписаниеОшибки() + "
		|отладочный текст запроса 
		|
		|" + ТекстЗапроса;

	КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьКонфигурацию(ГенерацияОтсутствующихСвойств = Ложь) Экспорт
	
	Попытка
		
		ПосмотримТекущиеПараметры = Новый Запрос();
		ПосмотримТекущиеПараметры.УстановитьСоединение(_соединение);
		
		ПосмотримТекущиеПараметры.Текст = "SHOW ALL";
		
		ТЗПараметров = ПосмотримТекущиеПараметры.Выполнить().Выгрузить();
		ТЗПараметров.Колонки.Добавить("РусскоеСвойство");
		РефлекторКонфигурации = Новый Рефлектор();
		
		Для Каждого Свойство Из таблицаТекущихСвойств Цикл
			Если Свойство.Аннотации <> Неопределено Тогда
				АнотацияПараметра = Свойство.Аннотации.Найти("ПараметрКонфигурации", "Имя");
				Если АнотацияПараметра <> Неопределено Тогда
					Попытка
						
						ИмяАнгл = АнотацияПараметра.Параметры.Найти("Имя", "Имя")["Значение"];
						Описание = АнотацияПараметра.Параметры.Найти("Описание", "Имя")["Значение"];
						СсылкаНаДокументацию = АнотацияПараметра.Параметры.Найти("СсылкаНаДокументацию", "Имя")["Значение"];
						
						ЗначениеПараметрСтрока = ТЗПараметров.Найти(ИмяАнгл, "name");
						Если ЗначениеПараметрСтрока <> Неопределено Тогда
							РефлекторКонфигурации.УстановитьСвойство(ЭтотОбъект, Свойство.Имя, ЗначениеПараметрСтрока["setting"]);
							ЗначениеПараметрСтрока.РусскоеСвойство = Свойство.Имя;
						ИначеЕсли ГенерацияОтсутствующихСвойств Тогда
							Сообщить("Английский параметр " + ИмяАнгл + "
								|не найден в таблице конфигурационных параметров ");
						КонецЕсли;
						
					Исключение
						ВызватьИсключение "Анотация " + Свойство.Имя + " имеет неверную сигнатуру 
						|" + ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ГенерацияОтсутствующихСвойств Тогда
			ГенерируемыеСвойства = "";
			Для Каждого ПолученныйПараметр Из ТЗПараметров Цикл
				Если НЕ ЗначениеЗаполнено(ПолученныйПараметр.РусскоеСвойство) Тогда
					Сообщить("Свойство " + ПолученныйПараметр["name"] + " не имеет обработки
						|" + ПолученныйПараметр["description"] + "
						|");
					
					ГенерируемыеСвойства = ГенерируемыеСвойства +
						"
						|&ПараметрКонфигурации(
						|	Имя = """ + ПолученныйПараметр["name"] + """,
						|	Описание = """",
						|	СсылкаНаДокументацию = """"
						|)
						|Перем <НазовиМеняПоРусски> Экспорт;
						|";
					
				КонецЕсли;
			КонецЦикла;
			
			Сообщить("Свойства для генерации
				|
				|" + ГенерируемыеСвойства);
			
		КонецЕсли;
		
	Исключение
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры

Инициализация();

